// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}


// Necessary for Next auth

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                   String                 @id @default(cuid())
  name                 String?
  lastName             String?
  email                String?                @unique
  emailVerified        DateTime?
  image                String?
  org                  String?
  dep                  String?
  teamSize             Int?
  yoe                  Int?
  jobTitle             String?
  country              String?
  category             String?
  studentEmail         String?
  approvalSent         Boolean                @default(false)
  formFilled           Boolean                @default(false)
  approved             Boolean                @default(false)
  apiKey               ApiKey?
  accounts             Account[]
  sessions             Session[]
  automations          Automation[]
  createdAt            DateTime               @default(now())
  IvyUsageIntermediate IvyUsageIntermediate[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model ApiKey {
  id      String   @id @default(cuid())
  key     String   @unique
  userId  String   @unique
  expires DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Automation {
  userId       String  @id
  email        String  @unique
  approvalSent Boolean @default(false)
  reminderSent Boolean @default(false)
  waitlistSent Boolean @default(false)
  user         User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model IvyUsageIntermediate {
  id      Int @id @default(autoincrement())
  usageId Int
  userId  String
  otherUsage String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  ivyUsage IvyUsage @relation(fields: [usageId], references: [id], onDelete: Cascade)
  

  @@unique([usageId, userId])
}

model IvyUsage {
  id    Int @id @default(autoincrement())
  usage String
  IvyUsageIntermediate IvyUsageIntermediate[]

}
